RxJava的强大性就来自于它所定义的操作符。

因为操作符可以让你对数据流做任何操作。

将一系列的操作符链接起来就可以完成复杂的逻辑。代码被分解成一系列可以组合的片段。这就是响应式函数编程的魅力。用的越多，就会越多的改变你的编程思维。

另外，RxJava也使我们处理数据的方式变得更简单。在最后一个例子里，我们调用了两个API，对API返回的数据进行了处理，然后保存到磁盘。
但是我们的Subscriber并不知道这些，它只是认为自己在接收一个Observable<String>对象。良好的封装性也带来了编码的便利！
1. create
2. just


3.单个Action
myObservable.subscribe( new Action1<String>() {
                           @Override
                           public void call(String s) {
                               System.out.println(s);
                           }
                       });
myObservable.subscribe(onNextAction, onErrorAction, onCompleteAction);

Observable.just("Hello, world!")
    .subscribe(new Action1<String>() {
        @Override
        public void call(String s) {
              System.out.println(s);
        }
    });
lambda：
      Observable.just("Hello, world!")
          .subscribe(s -> System.out.println(s));

4.map 的功能就是在observable和subscribe之间可以对数据进行基本操作，可以与方法结合用
      Observable.just("Hello, world!")
          .map(s -> s.hashCode())
          .map(i -> Integer.toString(i))
          .subscribe(s -> System.out.println(s));

      rx.Observable.from(folders)                 //两次from，一次flatmap，所以是遍历两下
                      .flatMap(file -> Observable.from(file.listFiles()))
                      .filter(file1 -> file1.getName().endsWith("png"))
                      .map(file2 -> getBitmapFromFile(file2))//与方法结合用
                      .subscribeOn(Schedulers.io())
                      .observeOn(AndroidSchedulers.mainThread())
                      .subscribe(bitmap -> imageCollectorView.setImageBitmap(bitmap));
5.from 它接收一个集合作为输入，然后每次输出一个元素给subscriber

6.flatMap() 遍历  与Observable.from结合用对集合进行遍历    它可以返回任何它想返回的Observable对象
        Observable.flatMap()接收一个Observable的输出作为输入，同时输出另外一个Observable
   flatMap输出的新的Observable正是我们在Subscriber想要接收的。现在Subscriber不再收到List<String>，而是收到一些列单个的字符串，就像Observable.from()的输出一样。
   这部分也是我当初学RxJava的时候最难理解的部分，一旦我突然领悟了，RxJava的很多疑问也就一并解决了。
   query("Hello, world!")
       .flatMap(urls -> Observable.from(urls))
       .subscribe(url -> System.out.println(url));

   query("Hello, world!")
       .flatMap(urls -> Observable.from(urls))
       .flatMap(url -> getTitle(url))
       .subscribe(title -> System.out.println(title));

       多重flatmap
       是不是感觉很不可思议？我竟然能将多个独立的返回Observable对象的方法组合在一起！帅呆了！
       不止这些，我还将两个API的调用组合到一个链式调用中了。我们可以将任意多个API调用链接起来。大家应该都应该知道同步所有的API调用，然后将所有API调用的回调结果组合成需要展示的数据
       是一件多么蛋疼的事情。这里我们成功的避免了callback hell（多层嵌套的回调，导致代码难以阅读维护）。现在所有的逻辑都包装成了这种简单的响应式调用。

7.filter 过滤  filter()输出和输入相同的元素，并且会过滤掉那些不满足检查条件的。
   .filter(file1 -> file1.getName().endsWith("png"))
   getTitle()返回null如果url不存在。我们不想输出"null"，那么我们可以从返回的title列表中过滤掉null值！

   query("Hello, world!")
       .flatMap(urls -> Observable.from(urls))
       .flatMap(url -> getTitle(url))
       .filter(title -> title != null)
       .subscribe(title -> System.out.println(title));

8.take  输出最多指定数量的结果。
        如果我们只想要最多5个结果：
        query("Hello, world!")
            .flatMap(urls -> Observable.from(urls))
            .flatMap(url -> getTitle(url))
            .filter(title -> title != null)
            .take(5)
            .subscribe(title -> System.out.println(title));

9.doOnNext() 允许我们在每次输出一个元素之前做一些额外的事情，比如这里的保存标
        如果我们想在打印之前，把每个标题保存到磁盘
        query("Hello, world!")
            .flatMap(urls -> Observable.from(urls))
            .flatMap(url -> getTitle(url))
            .filter(title -> title != null)
            .take(5)
            .doOnNext(title -> saveTitle(title))
            .subscribe(title -> System.out.println(title));

10.总结  RxJava包含了大量的操作符。操作符的数量是有点吓人，但是很值得你去挨个看一下，
         这样你可以知道有哪些操作符可以使用。弄懂这些操作符可能会花一些时间，但是一旦弄懂了，
         你就完全掌握了RxJava的威力。

